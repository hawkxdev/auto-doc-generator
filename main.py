#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç Word/PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
"""
import json
import traceback
from pathlib import Path
from src.utils.logger import setup_logger, log_info, log_error, log_success, log_step, log_separator


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json"""
    config_path = Path("config.json")
    if not config_path.exists():
        raise FileNotFoundError("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)


def validate_files(config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    excel_path = Path(config['input']['excel_file'])
    template_path = Path(config['input']['word_template'])

    if not excel_path.exists():
        raise FileNotFoundError(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")

    if not template_path.exists():
        raise FileNotFoundError(f"Word —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")

    log_success("–í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")


def create_output_directories(config):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∞–ø–æ–∫"""
    output_paths = [
        Path(config['output']['word_folder']),
        Path(config['output']['pdf_folder'])
    ]

    for path in output_paths:
        path.mkdir(parents=True, exist_ok=True)

    log_success("–í—ã—Ö–æ–¥–Ω—ã–µ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup_logger()
        log_info("üöÄ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –î–µ–º–æ –≤–µ—Ä—Å–∏—è")
        log_separator()

        log_step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        config = load_config()
        log_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        validate_files(config)
        create_output_directories(config)

        log_step("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        log_info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ Excel –¥–∞–Ω–Ω—ã—Ö...")

        from src.core.excel_processor import ExcelProcessor
        excel_processor = ExcelProcessor(config)
        excel_processor.load_file(config['input']['excel_file'])
        excel_processor.validate_structure()
        excel_processor.clean_data()

        log_info("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ Word —à–∞–±–ª–æ–Ω–∞...")

        from src.core.word_processor import WordProcessor
        word_processor = WordProcessor(config)
        word_processor.load_template(config['input']['word_template'])

        log_step("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        log_info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π...")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏

        log_info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å ReportGenerator

        log_separator()
        log_success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except KeyboardInterrupt:
        log_error("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        log_error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")


if __name__ == "__main__":
    main()
